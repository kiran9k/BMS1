{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","buttonClick","numbers","duplicates","Set","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","inputValue","trim","split","Symbol","iterator","next","done","items","value","length","ranges","i","Number","indexOf","add","push","err","return","sort","a","b","setState","size","notify","show","toConsumableArray","join","background","text","displayElements","map","item","react_default","createElement","onChangeListener","event","parsed","exec","target","bind","assertThisInitialized","className","notify_default","type","onChange","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.57bc0a30.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Notifications, {notify} from 'react-notify-toast';\n\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.inputValue = '';\n    this.numbers = [];\n    this.displayElements.bind(this);\n  }\n\n  buttonClick = () =>{\n    this.numbers = [];\n    let duplicates = new Set();\n    for(var  items of  this.inputValue.trim().split(\" \"))\n    {\n      if(items.trim().length==0)\n        continue;\n      let ranges = items.split(\"-\");\n      if(ranges.length>1)\n      {\n        for(let i = Number(ranges[0]);i<=Number(ranges[1]);i++)\n        {\n          if(this.numbers.indexOf(i)>=0)\n            duplicates.add(i);\n          else \n            this.numbers.push(i);\n        }  \n      }\n      else{\n        if(this.numbers.indexOf(Number(items))>=0)\n          duplicates.add(Number(items));\n        else \n          this.numbers.push(Number(items));\n      }\n    }\n    this.numbers.sort((a,b)=>a-b);\n    this.setState({numbers:this.numbers});\n    if(duplicates.size>0)\n      notify.show(\"Numbers : \"+[...duplicates].sort().join(\",\")+\" are duplicates and will be skipped.\", \"custom\", 5000,  { background: '#0E1717', text: \"#FFFFFF\" });\n  }\n  displayElements= ()=>{\n    return this.numbers.map(item =><p>{item}</p>);\n    \n  }\n  onChangeListener=(event)=>{\n    let re = /[ 0-9-]+/;\n    let parsed = re.exec(event.target.value);\n    if(parsed){\n      this.inputValue = parsed[0];\n    }\n    else if(event.target.value.length ==0)\n      this.inputValue = \"\";\n    this.setState({inputValue:this.inputValue});\n  }\n  render() {\n    return (\n      <div>\n        <div className=\"\">\n          <Notifications />\n        </div>\n        <div className=\"modal-header text-center\">\n          <h3>Assignemnet 1</h3>\n        </div>\n        <div className=\"row mt-3 md-3 pt-3 pd-3\">\n          <div className=\"col-md-6 col-md-offset-3 form-group\">\n            <div className=\"col-md-10\">\n              <input type=\"text\" className=\"form-control \" value={this.inputValue} onChange={this.onChangeListener.bind(this)}/>\n            </div>\n            <div className=\"col-md-2\">\n              <button type=\"submit\" className=\"form-control btn btn-success\" onClick={this.buttonClick.bind(this)}>Submit</button>\n            </div>\n          </div>\n        </div>\n        <div className=\"row pt-5 pd-5\">\n          <div className=\"col-md-6 col-md-offset-3 form-group\"> \n            Elements :\n              {this.displayElements()}\n          </div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}